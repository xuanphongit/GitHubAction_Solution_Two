name: Load Environment Variables

on:
  workflow_dispatch:
    inputs:
      environments:
        description: 'Comma-separated list of environments to load (e.g. smoke1,smoke2,smoke3,smoke4,smoke5)'
        required: true
        default: 'smoke1,smoke2,smoke3,smoke4,smoke5'

jobs:
  load-variables:
    runs-on: windows-latest
    strategy:
      matrix:
        environment: ['smoke1', 'smoke2', 'smoke3', 'smoke4', 'smoke5']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment variables
        shell: pwsh
        env:
          ENV_NAME: ${{ matrix.environment }}
        run: |
          Write-Host "Loading variables from $env:ENV_NAME environment"
          
          # Get all environment variables and save to file
          Get-ChildItem env: | Where-Object { $_.Name -notin @('PATH', 'HOME', 'USER', 'ENV_NAME') } | ForEach-Object {
            "$env:ENV_NAME`_$($_.Name)=$($_.Value)" | Out-File -FilePath "$env:ENV_NAME`_vars.txt" -Append
            Write-Host "Exported $env:ENV_NAME`_$($_.Name)"
          }

      - name: Upload variables
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environment }}-variables
          path: ${{ matrix.environment }}_vars.txt

  merge-and-update:
    runs-on: windows-latest
    needs: load-variables
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download smoke1 variables
        uses: actions/download-artifact@v4
        with:
          name: smoke1-variables
          path: smoke1_vars

      - name: Download smoke2 variables
        uses: actions/download-artifact@v4
        with:
          name: smoke2-variables
          path: smoke2_vars

      - name: Download smoke3 variables
        uses: actions/download-artifact@v4
        with:
          name: smoke3-variables
          path: smoke3_vars

      - name: Download smoke4 variables
        uses: actions/download-artifact@v4
        with:
          name: smoke4-variables
          path: smoke4_vars

      - name: Download smoke5 variables
        uses: actions/download-artifact@v4
        with:
          name: smoke5-variables
          path: smoke5_vars

      - name: Merge variables to GITHUB_ENV
        shell: pwsh
        run: |
          $environments = @('smoke1', 'smoke2', 'smoke3', 'smoke4', 'smoke5')
          $mergedVars = @{}
          
          # Read and merge all variables
          foreach ($env in $environments) {
            Write-Host "Reading variables from $env"
            Get-Content "$env`_vars/$env`_vars.txt" | ForEach-Object {
              if ($_ -match "(.+?)=(.+)") {
                $key = $matches[1]
                $value = $matches[2]
                $mergedVars[$key] = $value
                # Export to GITHUB_ENV
                echo "$key=$value" >> $env:GITHUB_ENV
                Write-Host "Exported to GITHUB_ENV: $key"
              }
            }
          }
          
          # Save merged variables to a file for reference
          $mergedVars.GetEnumerator() | ForEach-Object {
            "$($_.Key)=$($_.Value)" | Out-File -FilePath "merged_vars.txt" -Append
          }
          Write-Host "All variables have been merged and exported to GITHUB_ENV"

      - name: Update web.config
        shell: pwsh
        run: |
          # Check if web.config exists
          if (Test-Path "web.config") {
            # Create a backup of web.config
            Copy-Item "web.config" "web.config.backup"
            
            # Read the current web.config content
            $webConfig = Get-Content "web.config" -Raw
            
            # Update web.config with merged variables
            Get-Content "merged_vars.txt" | ForEach-Object {
              if ($_ -match "(.+?)=(.+)") {
                $key = $matches[1]
                $value = $matches[2] -replace '([\/&])', '\$1'
                $pattern = "<add key=`"$key`".*?\/>"
                $replacement = "<add key=`"$key`" value=`"$value`"\/>"
                $webConfig = $webConfig -replace $pattern, $replacement
              }
            }
            
            # Save the updated content back to web.config
            $webConfig | Set-Content "web.config"
            Write-Host "web.config has been updated with merged variables"
          } else {
            Write-Host "web.config not found"
            exit 1
          }

      - name: Show updated web.config
        shell: pwsh
        run: |
          if (Test-Path "web.config") {
            Get-Content "web.config"
          }

      - name: Show merged variables
        shell: pwsh
        run: |
          if (Test-Path "merged_vars.txt") {
            Write-Host "Merged variables:"
            Get-Content "merged_vars.txt"
          } 