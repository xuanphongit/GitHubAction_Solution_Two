name: Load Environment Variables
on:
  workflow_dispatch:

jobs:
  load-variables:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [smoke, smoke2, smoke3, smoke4, smoke5]
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Export variables from environment
        id: export-vars
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          echo "Exporting variables from ${{ matrix.environment }} environment..."
          
          # Create empty file first
          touch "${{ matrix.environment }}_vars.txt"
          
          # Export variables using jq
          if [ -n "$VARS_CONTEXT" ]; then
            echo "$VARS_CONTEXT" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
              # Export to GITHUB_ENV without environment prefix
              echo "$key=$value" >> $GITHUB_ENV
              # Save to file
              echo "$key=$value" >> "${{ matrix.environment }}_vars.txt"
              echo "Exported and saved: $key"
            done
          else
            echo "Warning: No variables found in vars context for ${{ matrix.environment }}"
            echo "NO_VARIABLES_FOUND=true" >> "${{ matrix.environment }}_vars.txt"
          fi

      - name: Verify variables file
        run: |
          if [ -f "${{ matrix.environment }}_vars.txt" ]; then
            echo "File contains $(wc -l < "${{ matrix.environment }}_vars.txt") variables:"
            cat "${{ matrix.environment }}_vars.txt"
          else
            echo "Error: Failed to create ${{ matrix.environment }}_vars.txt"
            exit 1
          fi

      - name: Upload variables
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environment }}-variables
          path: ${{ matrix.environment }}_vars.txt
          retention-days: 1

  merge-and-update:
    runs-on: windows-latest
    needs: load-variables
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all environment variables
        uses: actions/download-artifact@v4
        with:
          path: env_vars
          pattern: '*-variables'
          merge-multiple: true

      - name: Merge variables to GITHUB_ENV
        shell: pwsh
        run: |
          $mergedVars = @{}
          $envFiles = Get-ChildItem -Path "env_vars" -Filter "*_vars.txt"
          
          Write-Host "Found $($envFiles.Count) environment files"
          
          foreach ($file in $envFiles) {
            Write-Host "Processing $($file.Name)"
            $content = Get-Content $file.FullName
            Write-Host "Found $($content.Count) variables in $($file.Name)"
            
            $content | ForEach-Object {
              if ($_ -match "(.+?)=(.+)") {
                $key = $matches[1]
                $value = $matches[2]
                $mergedVars[$key] = $value
                # Export to GITHUB_ENV
                echo "$key=$value" >> $env:GITHUB_ENV
                Write-Host "Exported to GITHUB_ENV: $key"
              }
            }
          }
          
          # Save merged variables to a file for reference
          $mergedVars.GetEnumerator() | Sort-Object Key | ForEach-Object {
            "$($_.Key)=$($_.Value)" | Out-File -FilePath "merged_vars.txt" -Append
          }
          Write-Host "All variables have been merged and exported to GITHUB_ENV"

      - name: Update web.config
        shell: pwsh
        run: |
          # Check if web.config exists
          if (Test-Path "web.config") {
            # Create a backup of web.config with timestamp
            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            Copy-Item "web.config" "web.config.backup_$timestamp"
            
            # Read the current web.config content
            $webConfig = Get-Content "web.config" -Raw
            
            # Update web.config with merged variables
            Get-Content "merged_vars.txt" | ForEach-Object {
              if ($_ -match "(.+?)=(.+)") {
                $key = $matches[1]
                $value = $matches[2] -replace '([\/&])', '\$1'
                
                # Replace both patterns:
                # 1. <add key="key" value="..." />
                # 2. #{key}#
                $pattern1 = "<add key=`"$key`".*?\/>"
                $replacement1 = "<add key=`"$key`" value=`"$value`"\/>"
                $webConfig = $webConfig -replace $pattern1, $replacement1
                
                $pattern2 = "#{$key}#"
                $replacement2 = $value
                $webConfig = $webConfig -replace $pattern2, $replacement2
                
                Write-Host "Replacing patterns for key: $key"
              }
            }
            
            # Save the updated content back to web.config
            $webConfig | Set-Content "web.config"
            Write-Host "web.config has been updated with merged variables"
          } else {
            Write-Host "web.config not found"
            exit 1
          }

      - name: Show updated web.config
        shell: pwsh
        run: |
          if (Test-Path "web.config") {
            Get-Content "web.config"
          }

      - name: Show merged variables
        shell: pwsh
        run: |
          if (Test-Path "merged_vars.txt") {
            Write-Host "Merged variables:"
            Get-Content "merged_vars.txt"
          } 